package com.typesafe.sbtchild.probe

import sbt._
import builder.properties.BuilderProperties._

class ShimInstaller(val name: String) {

  private val sbtContents = """
// Note: This file is autogenerated by Builder.  Please do not modify!
addSbtPlugin("com.typesafe.builder" % "sbt-shim-""" + name + """" % """" + APP_VERSION + "\")\n"

  private val SHIM_FILE_NAME = "builder-" + name + "-shim.sbt"

  private lazy val pluginSbtFile = {
    val tmp = java.io.File.createTempFile(name, "sbt-shim")
    IO.write(tmp, sbtContents)
    tmp.deleteOnExit()
    tmp
  }

  private lazy val sbtFileSha = Hashing.sha512(pluginSbtFile)

  // TODO - Specify project too...
  private def isShimInstalled(state: State): Boolean = {
    // We can probably just check the build
    val extracted = Project.extract(state)
    val bd = extracted get (Keys.baseDirectory in ThisBuild)
    // Now, we need to check the SHA of the file against our sha...
    val shimPluginFile = bd / "project" / SHIM_FILE_NAME
    def shimExists = shimPluginFile.exists
    def foundShimInBuild = extracted.getOpt(SettingKey[Boolean](name + "-shim-installed")) getOrElse false
    def shimHashMatches = Hashing.sha512(shimPluginFile) == sbtFileSha
    // Note - We use found shim in build to see if we need to restart SBT due to plugin loading error...
    // It may be if everything is ok, but that one we should *FATALLY* error.
    shimExists && shimHashMatches && foundShimInBuild
  }

  private def doShim(state: State): Unit = {
    val extracted = Project.extract(state)
    val bd = extracted get (Keys.baseDirectory in ThisBuild)
    // TODO - look this up...
    val shimPluginFile = bd / "project" / SHIM_FILE_NAME
    // TODO - Don't hardcode group and name and stuff...
    //  We should generate this file as part fo the build.  THEN - we should also
    // take the SHA of the shim file to make sure we're up-to-date...
    IO.copyFile(pluginSbtFile, shimPluginFile, false)
  }

  def ensure(state: State): Unit = {
    // TODO - Detect SHA of shim file, and ensure we're up-to-date.
    if (!isShimInstalled(state)) {
      doShim(state)
      val message = "Installed shim for " + name + ", need to reboot SBT."
      System.err.println(message)
      // By Erroring out (and doing so before responding to protocol method),
      // We force the Sbt process to reload and try again...
      sys.error(message)
    }
  }

}
